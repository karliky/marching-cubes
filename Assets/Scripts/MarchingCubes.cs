using System;
using System.Collections.Generic;
using UnityEngine;

[Serializable]
public class MarchingCubes : ScriptableObject
{
	#region tables

	private static readonly int[] EdgeTable = new[]
	                                          {
	                                          	0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
	                                          	0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
	                                          	0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
	                                          	0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
	                                          	0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
	                                          	0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
	                                          	0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
	                                          	0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
	                                          	0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
	                                          	0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
	                                          	0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
	                                          	0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
	                                          	0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
	                                          	0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
	                                          	0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
	                                          	0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
	                                          	0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
	                                          	0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
	                                          	0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
	                                          	0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
	                                          	0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
	                                          	0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
	                                          	0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
	                                          	0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
	                                          	0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
	                                          	0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
	                                          	0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
	                                          	0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
	                                          	0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
	                                          	0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
	                                          	0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
	                                          	0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0
	                                          };

	private static readonly int[,] TriTable = new[,]
	                                          {
	                                          	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1},
	                                          	{8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1},
	                                          	{3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1},
	                                          	{4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1},
	                                          	{4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1},
	                                          	{9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1},
	                                          	{10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1},
	                                          	{5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1},
	                                          	{5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1},
	                                          	{8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1},
	                                          	{2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1},
	                                          	{7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1},
	                                          	{2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1},
	                                          	{11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1},
	                                          	{5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1},
	                                          	{11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1},
	                                          	{11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1},
	                                          	{2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1},
	                                          	{6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1},
	                                          	{3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1},
	                                          	{6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1},
	                                          	{6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1},
	                                          	{8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1},
	                                          	{7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1},
	                                          	{3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1},
	                                          	{0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1},
	                                          	{9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1},
	                                          	{8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1},
	                                          	{5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1},
	                                          	{0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1},
	                                          	{6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1},
	                                          	{10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1},
	                                          	{8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1},
	                                          	{1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1},
	                                          	{0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1},
	                                          	{3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1},
	                                          	{6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1},
	                                          	{9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1},
	                                          	{8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1},
	                                          	{3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1},
	                                          	{6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1},
	                                          	{10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1},
	                                          	{10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1},
	                                          	{2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1},
	                                          	{7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1},
	                                          	{7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1},
	                                          	{2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1},
	                                          	{1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1},
	                                          	{11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1},
	                                          	{8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1},
	                                          	{0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1},
	                                          	{7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1},
	                                          	{6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1},
	                                          	{7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1},
	                                          	{10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1},
	                                          	{0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1},
	                                          	{7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1},
	                                          	{6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1},
	                                          	{8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1},
	                                          	{6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1},
	                                          	{4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1},
	                                          	{10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1},
	                                          	{8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1},
	                                          	{1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1},
	                                          	{8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1},
	                                          	{10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1},
	                                          	{10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
	                                          	{11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1},
	                                          	{9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1},
	                                          	{6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1},
	                                          	{7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1},
	                                          	{3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1},
	                                          	{7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1},
	                                          	{3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1},
	                                          	{6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1},
	                                          	{9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1},
	                                          	{1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1},
	                                          	{4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1},
	                                          	{7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1},
	                                          	{6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1},
	                                          	{0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1},
	                                          	{6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1},
	                                          	{0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1},
	                                          	{11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1},
	                                          	{6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1},
	                                          	{5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1},
	                                          	{9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1},
	                                          	{1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1},
	                                          	{10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1},
	                                          	{0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1},
	                                          	{10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1},
	                                          	{11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1},
	                                          	{9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1},
	                                          	{7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1},
	                                          	{2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1},
	                                          	{8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1},
	                                          	{9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1},
	                                          	{9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1},
	                                          	{1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1},
	                                          	{5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1},
	                                          	{0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1},
	                                          	{10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1},
	                                          	{2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1},
	                                          	{0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1},
	                                          	{0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1},
	                                          	{9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1},
	                                          	{5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1},
	                                          	{5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1},
	                                          	{8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1},
	                                          	{9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1},
	                                          	{1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1},
	                                          	{3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1},
	                                          	{4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1},
	                                          	{9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1},
	                                          	{11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1},
	                                          	{11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1},
	                                          	{2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1},
	                                          	{9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1},
	                                          	{3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1},
	                                          	{1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1},
	                                          	{4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1},
	                                          	{0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1},
	                                          	{9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1},
	                                          	{1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	                                          	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
	                                          };

	#endregion

	public bool capped;

	[SerializeField] private Vertex[,,] vertices;


	public float iso = 0.2f;

	[SerializeField] private Vector3
		min = new Vector3(-10, -10, -10),
		max = new Vector3(10, 10, 10);

	[SerializeField] private IntVector3 steps = new IntVector3(20, 20, 20);

	public IntVector3 Steps
	{
		get { return steps; }
		set
		{
			if (!steps.Same(value))
			{
				steps = new IntVector3(Mathf.Max(value.x, 1), Mathf.Max(value.y, 1), Mathf.Max(value.z, 1));
				RegenerateGrid();
			}
		}
	}

	public Vector3 Size
	{
		get { return max - min; }
	}

	public Vector3 Min
	{
		get { return min; }
		set
		{
			if ((value - min).sqrMagnitude > Mathf.Epsilon)
			{
				min = value;
				FixGridPositions();
			}
		}
	}

	public Vector3 Max
	{
		get { return max; }
		set
		{
			if ((value - max).sqrMagnitude > Mathf.Epsilon)
			{
				max = value;
				FixGridPositions();
			}
		}
	}

	private void OnEnable()
	{
		if (vertices == null)
			RegenerateGrid();
	}

	private void RegenerateGrid()
	{
		Vector3 step = Vector3.Scale(Size, new Vector3(1.0f / steps.x, 1.0f / steps.y, 1.0f / steps.z));
		vertices = new Vertex[steps.x,steps.y,steps.z];
		for (int z = 0; z < steps.z; z++)
		{
			for (int y = 0; y < steps.y; y++)
			{
				for (int x = 0; x < steps.x; x++)
				{
					Vertex v = vertices[x, y, z];
					v.pos = min + Vector3.Scale(step, new Vector3(x, y, z));
					v.flux = 0;
					v.inside = false;
					v.normal = Vector3.zero;
					vertices[x, y, z] = v;
				}
			}
		}
	}

	private void FixGridPositions()
	{
		Vector3 step = Vector3.Scale(Size, new Vector3(1.0f / steps.x, 1.0f / steps.y, 1.0f / steps.z));
		for (int z = 0; z < steps.z; z++)
		{
			for (int y = 0; y < steps.y; y++)
			{
				for (int x = 0; x < steps.x; x++)
				{
					Vertex v = vertices[x, y, z];
					v.pos = min + Vector3.Scale(step, new Vector3(x, y, z));
					vertices[x, y, z] = v;
				}
			}
		}
	}


	//public MarchingCubes(Vector3 start, Vector3 end, Vector3 numSteps, float iso)
	//{
	//    numSteps.x = Mathf.CeilToInt(numSteps.x);
	//    numSteps.y = Mathf.CeilToInt(numSteps.y);
	//    numSteps.z = Mathf.CeilToInt(numSteps.z);

	//    this.iso = iso;

	//    //Vector3 sz = end - start;
	//    Vector3 step = Vector3.Scale((end - start), new Vector3(1 / numSteps.x, 1 / numSteps.y, 1 / numSteps.z));
	//    //sz.x /= step.x;
	//    //sz.y /= step.y;
	//    //sz.z /= step.z;

	//    size = numSteps;

	//    vertices = new Vertex[size.x,size.y,size.z];

	//    for (int z = 0; z < size.z; z++)
	//    {
	//        for (int y = 0; y < size.y; y++)
	//        {
	//            for (int x = 0; x < size.x; x++)
	//            {
	//                //int idx = x + y*size.y + z*size.y*size.z;

	//                Vertex v = vertices[x, y, z];
	//                v.pos = start + Vector3.Scale(step, new Vector3(x, y, z));
	//                v.flux = 0;
	//                v.inside = false;
	//                v.normal = Vector3.zero;
	//                vertices[x, y, z] = v;
	//            }
	//        }
	//    }
	//}

	[SerializeField] public MetaBalls metaBalls;

	public void ComputeMetaBalls()
	{
		if (metaBalls == null)
		{
			metaBalls = new MetaBalls();
			metaBalls.Initialize();
		}

		metaBalls.isoValue = iso;

		for (int z = 0; z < steps.z; z++)
		{
			for (int y = 0; y < steps.y; y++)
			{
				for (int x = 0; x < steps.x; x++)
				{
					Vertex v = vertices[x, y, z];
					v.flux = metaBalls.GetVertexValue(v);
					//v.flux = Random.Range(-1.0f, 1.0f);
					if (capped && (z == 0 || x == 0 || y == 0 || x == steps.x - 1 || y == steps.y - 1 || z == steps.z - 1))
					{
						v.flux = 0;
						if (z == 0)
						{
							//float a = metaBalls.GetVertexValue(vertices[x, y, 2]);
							//float b = metaBalls.GetVertexValue(vertices[x, y, 1]);
							//v.flux = a;
						}
						//v.inside = false;
					}
					v.inside = v.flux > iso;

					vertices[x, y, z] = v;
				}
			}
		}

		for (int z = 0; z < steps.z; z++)
		{
			for (int y = 0; y < steps.y; y++)
			{
				for (int x = 0; x < steps.x; x++)
				{
					Vertex v = vertices[x, y, z];
					Vector3 tangent;

					const float multiplier = 2;
					if (x == 0)
					{
						v.normal.x = (v.flux - vertices[x + 1, y, z].flux) * multiplier;
						tangent.x = (v.pos - vertices[x + 1, y, z].pos).x * multiplier;
					}
					else if (x == steps.x - 1)
					{
						v.normal.x = (vertices[x - 1, y, z].flux - v.flux) * multiplier;
						tangent.x = (vertices[x - 1, y, z].pos - v.pos).x * multiplier;
					}
					else
					{
						v.normal.x = vertices[x - 1, y, z].flux - vertices[x + 1, y, z].flux;
						tangent.x = (vertices[x - 1, y, z].pos - vertices[x + 1, y, z].pos).x;
					}

					if (y == 0)
					{
						v.normal.y = (v.flux - vertices[x, y + 1, z].flux) * multiplier;
						tangent.y = (v.pos - vertices[x, y + 1, z].pos).y * multiplier;
					}
					else if (y == steps.y - 1)
					{
						v.normal.y = (vertices[x, y - 1, z].flux - v.flux) * multiplier;
						tangent.y = (vertices[x, y - 1, z].pos - v.pos).y * multiplier;
					}
					else
					{
						v.normal.y = vertices[x, y - 1, z].flux - vertices[x, y + 1, z].flux;
						tangent.y = (vertices[x, y - 1, z].pos - vertices[x, y + 1, z].pos).y;
					}

					if (z == 0)
					{
						v.normal.z = (v.flux - vertices[x, y, z + 1].flux) * multiplier;
						tangent.z = (v.pos - vertices[x, y, z + 1].pos).z * multiplier;
					}
					else if (z == steps.z - 1)
					{
						v.normal.z = (vertices[x, y, z - 1].flux - v.flux) * multiplier;
						tangent.z = (vertices[x, y, z - 1].pos - v.pos).z * multiplier;
					}
					else
					{
						v.normal.z = vertices[x, y, z - 1].flux - vertices[x, y, z + 1].flux;
						tangent.z = (vertices[x, y, z - 1].pos - vertices[x, y, z + 1].pos).z;
					}

					v.normal.Normalize();
					tangent.Normalize();
					v.tangent = Vector3.Cross(tangent, v.normal);

					//http://en.wikipedia.org/wiki/UV_mapping#Finding_UV_on_a_sphere
					v.uv.x = 0.5f - Mathf.Atan2(-v.normal.z, -v.normal.x) / (Mathf.PI * 2);
					v.uv.y = 0.5f - 2.0f * (Mathf.Asin(-v.normal.y) / (Mathf.PI * 2));

					vertices[x, y, z] = v;
				}
			}
		}
	}


	private Vertex Interpolate(Vertex a, Vertex b)
	{
		float diff = (iso - a.flux) / (b.flux - a.flux);

		return new Vertex
		       {
		       	pos = a.pos + (b.pos - a.pos) * diff,
		       	flux = a.flux + (b.flux - a.flux) * diff,
		       	normal = a.normal + (b.normal - a.normal) * diff,
		       	uv = a.uv + (b.uv - a.uv) * diff,
		       	tangent = a.tangent + (b.tangent - a.tangent) * diff
		       };
	}

	public void Draw(List<Vector3> verticesOut, List<Vector3> normalsOut, List<Vector2> uvsOut, List<Vector4> tangentsOut)
	{
		verticesOut.Clear();
		normalsOut.Clear();
		uvsOut.Clear();
		tangentsOut.Clear();


		for (int z = 0; z < steps.z - 1; z++)
		{
			for (int y = 0; y < steps.y - 1; y++)
			{
				for (int x = 0; x < steps.x - 1; x++)
				{
					short lookup = 0;

					if (vertices[x, y, z].inside) lookup |= 128;
					if (vertices[x + 1, y, z].inside) lookup |= 64;
					if (vertices[x + 1, y + 1, z].inside) lookup |= 4;
					if (vertices[x, y + 1, z].inside) lookup |= 8;
					if (vertices[x, y, z + 1].inside) lookup |= 16;
					if (vertices[x + 1, y, z + 1].inside) lookup |= 32;
					if (vertices[x + 1, y + 1, z + 1].inside) lookup |= 2;
					if (vertices[x, y + 1, z + 1].inside) lookup |= 1;

					if (lookup != 0 && lookup != 255)
					{
						// 0 - 1
						Vertex[] verts = new Vertex[12];
						if ((EdgeTable[lookup] & 1) != 0)
						{
							// x + (y + 1)*,y+1, + (z + 1) * ,y+1, * size_z
							// (x + 1) + (y + 1)*,y+1, + (z + 1) * ,y+1, * size_z
							verts[0] = Interpolate(vertices[x, y + 1, z + 1],
							                       vertices[x + 1, y + 1, z + 1]);
						}

						// 1 - 2
						if ((EdgeTable[lookup] & 2) != 0)
						{
							// (x + 1) + (y + 1)*,y+1, + (z + 1) * ,y+1, * size_z
							// (x + 1) + (y + 1)*,y+1, + z * ,y+1, * size_z
							verts[1] = Interpolate(vertices[x + 1, y + 1, z + 1],
							                       vertices[x + 1, y + 1, z]);
						}

						// 2 - 3
						if ((EdgeTable[lookup] & 4) != 0)
						{
							// (x + 1) + (y + 1)*,y+1, + z * ,y+1, * size_z
							// x + (y + 1)*,y+1, + z * ,y+1, * size_z
							verts[2] = Interpolate(vertices[x + 1, y + 1, z],
							                       vertices[x, y + 1, z]);
						}

						// 3 - 0
						if ((EdgeTable[lookup] & 8) != 0)
						{
							// x + (y + 1)*,y+1, + z * ,y+1, * size_z
							// x + (y + 1)*,y+1, + (z + 1) * ,y+1, * size_z
							verts[3] = Interpolate(vertices[x, y + 1, z],
							                       vertices[x, y + 1, z + 1]);
						}

						// 4 - 5
						if ((EdgeTable[lookup] & 16) != 0)
						{
							// x + y*,y+1, + (z + 1) * ,y+1, * size_z
							// (x + 1) + y*,y+1, + (z + 1) * ,y+1, * size_z
							verts[4] = Interpolate(vertices[x, y, z + 1],
							                       vertices[x + 1, y, z + 1]);
						}

						// 5 - 6
						if ((EdgeTable[lookup] & 32) != 0)
						{
							// (x + 1) + y*,y+1, + (z + 1) * ,y+1, * size_z
							// (x + 1) + y*,y+1, + z * ,y+1, * size_z
							verts[5] = Interpolate(vertices[x + 1, y, z + 1],
							                       vertices[x + 1, y, z]);
						}

						// 6 - 7
						if ((EdgeTable[lookup] & 64) != 0)
						{
							// (x + 1) + y*,y+1, + z * ,y+1, * size_z
							// x + y*,y+1, + z * ,y+1, * size_z
							verts[6] = Interpolate(vertices[x + 1, y, z],
							                       vertices[x, y, z]);
						}

						// 7 - 4
						if ((EdgeTable[lookup] & 128) != 0)
						{
							// x + y*,y+1, + z * ,y+1, * size_z
							// x + y*,y+1, + (z + 1) * ,y+1, * size_z
							verts[7] = Interpolate(vertices[x, y, z],
							                       vertices[x, y, z + 1]);
						}

						// 0 - 4
						if ((EdgeTable[lookup] & 256) != 0)
						{
							// x + (y + 1)*,y+1, + (z + 1) * ,y+1, * size_z
							// x + y*,y+1, + (z + 1) * ,y+1, * size_z
							verts[8] = Interpolate(vertices[x, y + 1, z + 1],
							                       vertices[x, y, z + 1]);
						}

						// 1 - 5
						if ((EdgeTable[lookup] & 512) != 0)
						{
							// (x + 1) + (y + 1)*,y+1, + (z + 1) * ,y+1, * size_z
							// (x + 1) + y*,y+1, + (z + 1) * ,y+1, * size_z
							verts[9] = Interpolate(vertices[x + 1, y + 1, z + 1],
							                       vertices[x + 1, y, z + 1]);
						}

						// 2 - 6
						if ((EdgeTable[lookup] & 1024) != 0)
						{
							// (x + 1) + (y + 1)*,y+1, + z * ,y+1, * size_z
							// (x + 1) + y*,y+1, + z * ,y+1, * size_z
							verts[10] = Interpolate(vertices[x + 1, y + 1, z],
							                        vertices[x + 1, y, z]);
						}

						// 3 - 7
						if ((EdgeTable[lookup] & 2048) != 0)
						{
							// x + (y + 1)*,y+1, + z * ,y+1, * size_z
							// x + y*,y+1, + z * ,y+1, * size_z
							verts[11] = Interpolate(vertices[x, y + 1, z],
							                        vertices[x, y, z]);
						}

						for (int i = 0; TriTable[lookup, i] != -1; i += 3)
						{
							for (int j = i; j < i + 3; j++)
							{
								Vertex v = verts[TriTable[lookup, j]];
								normalsOut.Add(v.normal);
								verticesOut.Add(v.pos);
								uvsOut.Add(v.uv);
								tangentsOut.Add(v.tangent);
							}
						}
					}
				}
			}
		}
	}
}

[Serializable]
public struct Vertex
{
	public Vector3 pos;
	public float flux;
	public bool inside;
	public Vector3 normal;
	public Vector2 uv;
	public Vector4 tangent;
}


[Serializable]
public struct IntVector3
{
	public readonly int x, y, z;

	public IntVector3(int x, int y, int z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	}

	public static implicit operator IntVector3(Vector3 v)
	{
		return new IntVector3((int) v.x, (int) v.y, (int) v.z);
	}

	public static implicit operator Vector3(IntVector3 v)
	{
		return new Vector3(v.x, v.y, v.z);
	}

	public static IntVector3 operator -(IntVector3 a, IntVector3 b)
	{
		return new IntVector3(a.x - b.x, a.y - b.y, a.z - b.z);
	}

	public float SqrMagnitude
	{
		get { return x * x + y * y + z * z; }
	}

	public float Magnitude
	{
		get { return Mathf.Sqrt(SqrMagnitude); }
	}

	public bool Same(IntVector3 other)
	{
		return (this - other).SqrMagnitude <= Mathf.Epsilon;
	}
}